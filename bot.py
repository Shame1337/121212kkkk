import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
import os
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup

API_TOKEN = '8047134791:AAGwYVEaa9uSDdkyuLfKImAdldpzn8580_4'
ADMIN_ID = 7688865252

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

class UserStates(StatesGroup):
    waiting_for_message = State()
    waiting_for_reply = State()

# –ö—Ä–∞—Å–∏–≤–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
WELCOME_TEXT = (
    '<b>üëã ·¥®·¥©–∏ ô·¥á·¥õ!</b>\n'
    'œ∂·¥õ–æ·¥õ –±–æ·¥õ ·¥Ñ–æ–∑–¥·¥Ä–Ω ·¥Ñ·¥®·¥á—Ü–∏·¥Ä·¥ß—å–Ω–æ –¥·¥ß—è ·¥õ·¥á—Ö, —É ·¥ã–æ·¥¶–æ <b>·¥Ñ·¥®·¥Ä ç-–±·¥ß–æ·¥ã</b> –∏ –Ω·¥á·¥õ  ô–æ–∑ ç–æ–∂–Ω–æ·¥Ñ·¥õ–∏ –Ω·¥Ä·¥®–∏·¥Ñ·¥Ä·¥õ—å ·¥®·¥á·¥© ô—ã ç.\n'
    '·¥á·¥Ñ·¥ß–∏ ·¥õ—ã —Ö–æ—á·¥á…Ø—å ·¥Ñ ô—è–∑·¥Ä·¥õ—å·¥Ñ—è ·¥Ñ–æ  ç–Ω–æ–π ‚Äî ·¥®·¥©–æ·¥Ñ·¥õ–æ –Ω·¥Ä·¥®–∏…Ø–∏ ·¥Ñ—é–¥·¥Ä, –∏ —è –æ–±—è–∑·¥Ä·¥õ·¥á·¥ß—å–Ω–æ ·¥õ·¥á–±·¥á <b>–æ·¥õ ô·¥á—á—É</b>!\n\n'
    '<i>‚úâÔ∏è –∂–¥—É ·¥õ ô–æ·¥á·¥¶–æ ·¥Ñ–æ–æ–±—â·¥á–Ω–∏—è!</i>'
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–ø–∏—Å–∞—Ç—å"
def get_write_keyboard():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton('‚úçÔ∏è –Ω·¥Ä·¥®–∏·¥Ñ·¥Ä·¥õ—å', callback_data='write_message'))
    return kb

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(WELCOME_TEXT, reply_markup=get_write_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å"
@dp.callback_query_handler(Text(equals='write_message'))
async def prompt_for_message(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer('‚úèÔ∏è –Ω·¥Ä·¥®–∏…Ø–∏ ·¥Ñ ô–æ—ë ·¥Ñ–æ–æ–±—â·¥á–Ω–∏·¥á, –∏ —è ·¥®·¥á·¥©·¥á–¥·¥Ä ç ·¥á·¥¶–æ  Ä·¥á·¥Ñ·¥è·¥Ö·¥á!')
    await UserStates.waiting_for_message.set()

@dp.message_handler(state=UserStates.waiting_for_message, content_types=types.ContentTypes.TEXT)
async def handle_user_message(message: types.Message, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    user = message.from_user
    text = (
        f'<b>–Ω–æ ô–æ·¥á ·¥Ñ–æ–æ–±—â·¥á–Ω–∏·¥á!</b>\n'
        f'üë§ <b>·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á:</b> @{user.username if user.username else "–ù–µ—Ç"}\n'
        f'üÜî <b>…™·¥Ö:</b> <code>{user.id}</code>\n\n'
        f'<b>·¥Ñ–æ–æ–±—â·¥á–Ω–∏·¥á:</b>\n{message.text}'
    )
    reply_markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton('–æ·¥õ ô·¥á·¥õ–∏·¥õ—å', callback_data=f'reply_{user.id}')
    )
    await bot.send_message(ADMIN_ID, text, reply_markup=reply_markup)
    await message.answer('‚úÖ ·¥Ñ–æ–æ–±—â·¥á–Ω–∏·¥á –æ·¥õ·¥®·¥©·¥Ä ô·¥ß·¥á–Ω–æ  Ä·¥á·¥Ñ·¥è·¥Ö·¥á –æ–∂–∏–¥·¥Ä–π·¥õ·¥á –æ·¥õ ô·¥á·¥õ·¥Ä.')
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–û—Ç–≤–µ—Ç–∏—Ç—å" —É –∞–¥–º–∏–Ω–∞
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('reply_'), user_id=ADMIN_ID)
async def admin_reply_prompt(call: types.CallbackQuery, state: FSMContext):
    user_id = int(call.data.split('_')[1])
    await call.message.answer(f'‚úçÔ∏è –Ω·¥Ä·¥®–∏…Ø–∏·¥õ·¥á –æ·¥õ ô·¥á·¥õ –¥·¥ß—è ·¥®–æ·¥ß—å–∑–æ ô·¥Ä·¥õ·¥á·¥ß—è <code>{user_id}</code>')
    await state.update_data(reply_to=user_id)
    await UserStates.waiting_for_reply.set()

@dp.message_handler(state=UserStates.waiting_for_reply, user_id=ADMIN_ID, content_types=types.ContentTypes.TEXT)
async def admin_send_reply(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('reply_to')
    if user_id:
        await bot.send_message(user_id, f'üì© <b>–æ·¥õ ô·¥á·¥õ –æ·¥õ  Ä·¥á·¥Ñ·¥è·¥Ö·¥á:</b>\n\n{message.text}', reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton('–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data='write_message')
        ))
        await message.answer('‚úÖ –æ·¥õ ô·¥á·¥õ –æ·¥õ·¥®·¥©·¥Ä ô·¥ß·¥á–Ω!')
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True) 